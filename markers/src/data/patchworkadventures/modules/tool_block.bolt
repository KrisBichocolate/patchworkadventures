#
# Block tool
#
# This tool works by triggering an advancement when a block is placed.
# A raycast will be done to find where the placement happened and then
# a marker is added to the newly placed block.

advancement pwa_markers:marker_tool_block_placed {
    "criteria": {
        "requirement": {
            "trigger": "minecraft:placed_block",
            "conditions": {
                "player": {
                    "equipment": {
                        "mainhand": {
                            "predicates": {
                                "custom_data": "{pwa_markers_marker_tool:1b}"
                            }
                        }
                    }
                }
            }
        }
    },
    "rewards": {
        "function": "pwa_markers:zzzinternal/block_tool/used"
    }
}

function pwa_markers:zzzinternal/block_tool/used:
    advancement revoke @s only pwa_markers:marker_tool_block_placed
    tag @s add pwa_markers_block_placer
    function pwa_markers:zzzinternal/block_tool/start with entity @s SelectedItem.components."minecraft:custom_data".marker_data
    tag @s remove pwa_markers_block_placer

function pwa_markers:zzzinternal/block_tool/start:
    $function pwa_utils:raycast_from_eyes {hitCheckCallback:"pwa_markers:zzzinternal/block_tool/hit_check",increment:"0.1",max:"70",custom:{block:"$(block)"}}

function pwa_markers:zzzinternal/block_tool/hit_check:
    # Keep going until the right block
    $execute unless block ~ ~ ~ $(block) run return 1
    function pwa_utils:raycast_finish

    # toggle block marking
    execute align xyz positioned ~0.5 ~0.5 ~0.5 summon minecraft:marker:
        data modify entity @s Tags set value ["pwa_markers_marker", "pwa_markers_marker_with_block"]
        data modify entity @s Tags append from entity
            @a[tag=pwa_markers_block_placer, limit=1]
            SelectedItem.components."minecraft:custom_data".marker_data.tag
        data modify entity @s data set from entity
            @a[tag=pwa_markers_block_placer, limit=1]
            SelectedItem.components."minecraft:custom_data".marker_data

# For wands and blocks, tool data is set up from data storage
# by applying a conditional item modifier to all slots of the player
# inventory.
#
# args {tag:"mytag",block:"bla"}
function pwa_markers:give_block_tool:
    $execute unless data storage pwa_markers:markers kv.$(tag) run function pwa_markers:zzzinternal/default_marker {tag:"$(tag)"}
    $data modify storage pwa_markers:temp new_marker_tool set from storage pwa_markers:markers kv.$(tag).marker_data
    $data modify storage pwa_markers:temp new_marker_tool.block set value "$(block)"
    data modify storage pwa_markers:temp new_marker_tool.tool_type set value "block"

    $give @s $(block)[custom_data={pwa_markers_marker_tool:1b,pwa_markers_new_marker_tool:1b}] 1
    data modify storage pwa_markers:temp zero set value 0
    function pwa_markers:zzzinternal/marker_tool_prepare_make_name_entity with storage pwa_markers:temp new_marker_tool
    execute as @e[type=minecraft:marker, tag=pwa_markers_name_entity]
        run function pwa_markers:zzzinternal/marker_tool_prepare
    data remove storage pwa_markers:temp new_marker_tool
    kill @e[type=minecraft:marker, tag=pwa_markers_name_entity]